version: '3.8'

services:
  # .NET API Service
  ai-api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.dotnet
    ports:
      - "5100:8080"
      - "5101:8081"  # gRPC
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=ai_engine;Username=weedgo;Password=weedgo123
      - ConnectionStrings__Redis=redis:6379
      - ML_SERVICE_HOST=ai-ml
      - ML_SERVICE_PORT=50051
      - Milvus__Host=milvus
      - Milvus__Port=19530
    depends_on:
      - postgres
      - redis
      - milvus
      - ai-ml
    volumes:
      - ./src/dotnet:/app
      - ./data/models:/models
    networks:
      - ai-network

  # Python ML Service
  ai-ml:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.python
    ports:
      - "50051:50051"  # gRPC
      - "8501:8501"    # Model serving metrics
    environment:
      - GRPC_PORT=50051
      - MODEL_PATH=/models
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=ai_engine
      - POSTGRES_USER=weedgo
      - POSTGRES_PASSWORD=weedgo123
      - REDIS_HOST=redis
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - LOG_LEVEL=DEBUG
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./src/python:/app
      - ./data/models:/models
      - ./data/datasets:/datasets
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - ai-network
    depends_on:
      - postgres
      - redis
      - milvus

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=ai_engine
      - POSTGRES_USER=weedgo
      - POSTGRES_PASSWORD=weedgo123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/migrations:/docker-entrypoint-initdb.d
    networks:
      - ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weedgo"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache (Primary)
  redis:
    image: redis:7-alpine
    ports:
      - "6381:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Cache (Secondary)
  redis-secondary:
    image: redis:7-alpine
    ports:
      - "6382:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_secondary_data:/data
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Milvus Vector Database
  milvus:
    image: milvusdb/milvus:latest
    ports:
      - "19531:19530"
      - "9092:9091"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    depends_on:
      - etcd
      - minio
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - ai-network

  # MinIO for Milvus
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MLflow for Model Management
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://weedgo:weedgo123@postgres/mlflow
      - DEFAULT_ARTIFACT_ROOT=s3://mlflow/artifacts
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    depends_on:
      - postgres
      - minio
    networks:
      - ai-network
    command: >
      mlflow server
      --backend-store-uri postgresql://weedgo:weedgo123@postgres/mlflow
      --default-artifact-root s3://mlflow/artifacts
      --host 0.0.0.0

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ai-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-network

  # Jupyter Lab for Development
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=weedgo
    volumes:
      - ./src/python:/home/jovyan/work
      - ./data:/home/jovyan/data
    networks:
      - ai-network

volumes:
  postgres_data:
  redis_data:
  redis_secondary_data:
  milvus_data:
  etcd_data:
  minio_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

networks:
  ai-network:
    driver: bridge