# AI Engine Services - Python ML Dockerfile

# Base image with Python 3.11
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install minimal system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    pkg-config \
    cmake \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    wget \
    curl \
    git \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip
RUN python -m pip install --upgrade pip setuptools wheel

# Set working directory
WORKDIR /app

# Copy Python requirements
COPY src/python/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional ML packages (CPU version)
RUN pip install --no-cache-dir \
    torch \
    torchvision \
    torchaudio

# Install face recognition models
RUN python -c "import face_recognition; print('Face recognition installed')"

# Download spaCy models
RUN python -m spacy download en_core_web_lg
RUN python -m spacy download fr_core_news_lg

# Install TensorRT (if available)
RUN pip install --no-cache-dir nvidia-tensorrt || echo "TensorRT not available"

# Copy source code
COPY src/python/ .

# Create model directories
RUN mkdir -p /models /datasets /app/logs

# Create non-root user
RUN groupadd -r weedgo && useradd -r -g weedgo -u 1000 weedgo

# Set permissions
RUN chown -R weedgo:weedgo /app /models /datasets

# Switch to non-root user
USER weedgo

# Pre-compile Python files
RUN python -m compileall . || true

# Download initial models (if needed)
RUN python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')" || true

# Expose ports
EXPOSE 50051 8501

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import grpc; grpc.channel_ready_future(grpc.insecure_channel('localhost:50051')).result(timeout=5)" || exit 1

# Environment variables
ENV MODEL_PATH=/models
ENV DATASETS_PATH=/datasets
ENV PYTHONPATH=/app
ENV CUDA_VISIBLE_DEVICES=0
ENV OMP_NUM_THREADS=4
ENV MKL_NUM_THREADS=4
ENV NUMBA_CACHE_DIR=/tmp/numba_cache

# Entry point
CMD ["python", "ml_service/main_server.py"]

# Development stage
FROM base AS development

# Install development dependencies
RUN pip install --no-cache-dir \
    jupyter \
    jupyterlab \
    notebook \
    ipywidgets \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    flake8 \
    mypy \
    isort

# Expose Jupyter port
EXPOSE 8888

# Override entrypoint for development
CMD ["tail", "-f", "/dev/null"]

# Production stage
FROM base AS production

# Remove development packages
RUN pip uninstall -y \
    pip-tools \
    wheel \
    setuptools \
    || true

# Clear pip cache
RUN pip cache purge || true

# Optimize Python
ENV PYTHONOPTIMIZE=2

# Final production image
FROM production AS final