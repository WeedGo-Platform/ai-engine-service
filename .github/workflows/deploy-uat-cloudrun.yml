name: Deploy UAT to Cloud Run

# Automatically deploy to Google Cloud Run when uat branch is updated
# This runs after the auto-sync-dev-to-uat workflow completes
on:
  push:
    branches:
      - uat
  workflow_dispatch:  # Allow manual trigger
    inputs:
      run_migrations:
        description: 'Run database migrations'
        required: false
        type: boolean
        default: false

env:
  PROJECT_ID: weedgo-uat-2025
  REGION: us-central1
  SERVICE_NAME: weedgo-uat
  CLOUD_SQL_INSTANCE: weedgo-uat-db
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  IMAGE_NAME: weedgo-uat

jobs:
  # Build and push Docker image to Artifact Registry
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }} --quiet

      - name: Generate image tags
        id: meta
        run: |
          IMAGE_TAG="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/weedgo/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          IMAGE_LATEST="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/weedgo/${{ env.IMAGE_NAME }}:lauat"
          echo "tags=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "lauat=$IMAGE_LATEST" >> $GITHUB_OUTPUT
          echo "üì¶ Image tags:"
          echo "  - $IMAGE_TAG"
          echo "  - $IMAGE_LATEST"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/Backend
          file: ./src/Backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.meta.outputs.latest }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.latest }}
          cache-to: type=registry,ref=${{ steps.meta.outputs.latest }},mode=max

      - name: Verify image
        run: |
          echo "‚úÖ Docker image built and pushed successfully"
          echo "Image: ${{ steps.meta.outputs.tags }}"

  # Deploy to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying to Cloud Run..."

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ needs.build.outputs.image_tag }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars "ENVIRONMENT=uat,DB_HOST=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUD_SQL_INSTANCE }},DB_PORT=5432,DB_NAME=ai_engine,DB_USER=weedgo,DB_PASSWORD=${{ secrets.CLOUD_SQL_DB_PASSWORD }}" \
            --add-cloudsql-instances ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUD_SQL_INSTANCE }} \
            --min-instances 0 \
            --max-instances 10 \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --concurrency 80 \
            --quiet

      - name: Get service URL
        id: service
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üåê Service URL: $SERVICE_URL"

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for service to be ready..."
          sleep 30

      - name: Health check
        id: health
        run: |
          SERVICE_URL="${{ steps.service.outputs.url }}"
          MAX_ATTEMPTS=10
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "üîç Health check attempt $ATTEMPT/$MAX_ATTEMPTS..."

            if curl -sf "$SERVICE_URL/health" > /dev/null; then
              echo "‚úÖ Health check passed!"
              RESPONSE=$(curl -s "$SERVICE_URL/health")
              echo "Response: $RESPONSE"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "‚ö†Ô∏è  Health check failed, retrying in 10 seconds..."
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done

          echo "‚ùå Health check failed after $MAX_ATTEMPTS attempts"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Generate deployment summary
        if: always()
        run: |
          echo "## üöÄ Cloud Run Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** UAT" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ needs.build.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Service URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **API:** ${{ steps.service.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health:** ${{ steps.service.outputs.url }}/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.health.outputs.success }}" == "true" ]; then
            echo "### ‚úÖ Deployment Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "Service is healthy and responding to requests." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ö†Ô∏è Deployment Status: Health Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "Service deployed but health check did not pass." >> $GITHUB_STEP_SUMMARY
            echo "Please check the Cloud Run logs for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Cloud Resources" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud SQL:** ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUD_SQL_INSTANCE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database:** ai_engine" >> $GITHUB_STEP_SUMMARY

  # Optional: Run database migrations
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.run_migrations == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Download Cloud SQL Proxy
        run: |
          curl -o cloud-sql-proxy \
            https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.0/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install psycopg2
        run: |
          pip install psycopg2-binary

      - name: Start Cloud SQL Proxy
        run: |
          ./cloud-sql-proxy ${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.CLOUD_SQL_INSTANCE }} &
          sleep 5

      - name: Run migrations
        run: |
          export PGPASSWORD="${{ secrets.CLOUD_SQL_DB_PASSWORD }}"
          psql -h 127.0.0.1 \
               -p 5432 \
               -U weedgo \
               -d ai_engine \
               -f src/Backend/database/ai_engine_minimal_schema.sql \
               || echo "‚ö†Ô∏è  Migrations may have partial failures (this is often expected)"

          echo "‚úÖ Database migrations completed"

      - name: Verify migrations
        run: |
          export PGPASSWORD="${{ secrets.CLOUD_SQL_DB_PASSWORD }}"
          TABLE_COUNT=$(psql -h 127.0.0.1 -p 5432 -U weedgo -d ai_engine \
            -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")

          echo "üìä Total tables in database: $TABLE_COUNT"
          echo "table_count=$TABLE_COUNT" >> $GITHUB_OUTPUT

  # Post-deployment notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, deploy, migrate]
    if: always()

    steps:
      - name: Deployment success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ UAT environment deployed successfully to Cloud Run!"
          # Add Slack/Discord webhook here:
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-Type: application/json' \
          #   -d '{"text":"‚úÖ UAT deployment successful!"}'

      - name: Deployment failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå UAT environment deployment failed!"
          # Add Slack/Discord webhook here:
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-Type: application/json' \
          #   -d '{"text":"‚ùå UAT deployment failed! Check GitHub Actions."}'
