name: Auto-Sync Dev to UAT

# Automatically merge dev branch into uat branch on push
# This ensures uat environment stays up-to-date with lauat dev changes
on:
  push:
    branches:
      - dev
  workflow_dispatch:  # Allow manual trigger

env:
  GIT_AUTHOR_NAME: "GitHub Actions Bot"
  GIT_AUTHOR_EMAIL: "actions@github.com"
  GIT_COMMITTER_NAME: "GitHub Actions Bot"
  GIT_COMMITTER_EMAIL: "actions@github.com"

permissions:
  contents: write

jobs:
  sync-dev-to-uat:
    name: Sync Dev → UAT Branch
    runs-on: ubuntu-lauat

    # Prevent infinite loops if uat branch also triggers workflows
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper merging
          fetch-depth: 0
          # Use PAT to trigger downstream workflows (falls back to GITHUB_TOKEN if not set)
          token: ${{ secrets.WORKFLOW_PAT || secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "${{ env.GIT_AUTHOR_NAME }}"
          git config --global user.email "${{ env.GIT_AUTHOR_EMAIL }}"

      - name: Fetch all branches
        run: |
          git fetch origin dev
          git fetch origin uat

      - name: Checkout uat branch
        run: |
          git checkout uat
          echo "✓ Switched to uat branch"

      - name: Check if merge is needed
        id: check_merge
        run: |
          # Check if uat already contains all dev commits
          if git merge-base --is-ancestor dev uat; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "ℹ️  UAT branch already contains all dev commits - no merge needed"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "✓ Merge needed - dev has new commits"
          fi

      - name: Merge dev into uat
        if: steps.check_merge.outputs.skip == 'false'
        run: |
          echo "🔄 Merging dev into uat..."

          # Attempt merge with union strategy for environment files (defined in .gitattributes)
          if git merge dev --no-edit --allow-unrelated-histories -m "chore: Auto-sync dev to uat

          Automated merge of dev branch into uat branch.

          Changes from dev:
          $(git log uat..dev --oneline --max-count=10)

          🤖 Generated by GitHub Actions
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}"; then
            echo "✅ Merge successful (no conflicts)"
          else
            # Check if there are conflicts
            if git status | grep -q "Unmerged paths"; then
              echo "⚠️  Merge conflicts detected"

              # Show conflicted files
              echo "Conflicted files:"
              git status --short | grep "^UU"

              # For environment files, prefer uat branch version
              # This is handled by .gitattributes, but we can also resolve manually
              CONFLICT_FILES=$(git diff --name-only --diff-filter=U)

              for file in $CONFLICT_FILES; do
                echo "Checking conflict in: $file"

                # If it's an environment file or uat-specific config, keep uat version
                if [[ "$file" =~ \.env\.uat$ ]] || \
                   [[ "$file" =~ docker-compose\.uat\.yml$ ]] || \
                   [[ "$file" =~ \.env\.uat$ ]]; then
                  echo "  → Keeping uat branch version for: $file"
                  git checkout --ours "$file"
                  git add "$file"
                else
                  # For other files, this is a real conflict that needs manual resolution
                  echo "  → Real conflict in: $file - requires manual resolution"
                  echo "::error::Merge conflict in $file requires manual resolution"
                  exit 1
                fi
              done

              # Complete the merge
              git commit --no-edit
              echo "✅ Merge conflicts resolved automatically"
            else
              echo "::error::Merge failed for unknown reason"
              exit 1
            fi
          fi

      - name: Verify uat-specific configurations
        if: steps.check_merge.outputs.skip == 'false'
        run: |
          echo "🔍 Verifying uat-specific configurations..."

          # Check that .env.uat exists and has correct port
          if [ -f "src/Backend/.env.uat" ]; then
            if grep -q "PORT=6024" src/Backend/.env.uat; then
              echo "✓ Backend .env.uat has correct port (6024)"
            else
              echo "::warning::Backend .env.uat may have incorrect port"
            fi
          else
            echo "::warning::Backend .env.uat not found"
          fi

          # Check that frontend .env.uat exists
          if [ -f "src/Frontend/ai-admin-dashboard/.env.uat" ]; then
            if grep -q "6024" src/Frontend/ai-admin-dashboard/.env.uat; then
              echo "✓ Frontend .env.uat has correct API URL"
            else
              echo "::warning::Frontend .env.uat may have incorrect API URL"
            fi
          else
            echo "::warning::Frontend .env.uat not found"
          fi

          # Check package.json has dev:uat script
          if [ -f "src/Frontend/ai-admin-dashboard/package.json" ]; then
            if grep -q '"dev:uat"' src/Frontend/ai-admin-dashboard/package.json; then
              echo "✓ Frontend package.json has dev:uat script"
            else
              echo "::warning::Frontend package.json missing dev:uat script"
            fi
          fi

      - name: Push to uat branch
        if: steps.check_merge.outputs.skip == 'false'
        run: |
          echo "📤 Pushing merged changes to uat branch..."
          git push origin uat
          echo "✅ Successfully pushed to uat branch"

      - name: Create merge summary
        if: always()
        run: |
          echo "## 🔄 Dev → UAT Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_merge.outputs.skip }}" == "true" ]; then
            echo "**Status:** ✅ Already up-to-date (no merge needed)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "UAT branch already contains all commits from dev." >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** ✅ Merge successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Commits Merged" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git log uat~10..uat --oneline >> $GITHUB_STEP_SUMMARY || echo "No recent commits" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. The uat-deploy workflow will automatically run" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor the build and uats in the uat environment" >> $GITHUB_STEP_SUMMARY
          echo "3. UAT environment will be available at:" >> $GITHUB_STEP_SUMMARY
          echo "   - Backend: http://localhost:6024 (local)" >> $GITHUB_STEP_SUMMARY
          echo "   - Frontend: http://localhost:6003 (local)" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "## ❌ Dev → UAT Sync Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The automatic merge from dev to uat encountered an error." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Action Required" >> $GITHUB_STEP_SUMMARY
          echo "Manual intervention is needed to resolve merge conflicts." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Manual Merge Steps:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "git checkout uat" >> $GITHUB_STEP_SUMMARY
          echo "git pull origin uat" >> $GITHUB_STEP_SUMMARY
          echo "git merge dev" >> $GITHUB_STEP_SUMMARY
          echo "# Resolve conflicts manually" >> $GITHUB_STEP_SUMMARY
          echo "# Keep uat-specific configs (.env.uat, package.json dev:uat script, etc.)" >> $GITHUB_STEP_SUMMARY
          echo "git add ." >> $GITHUB_STEP_SUMMARY
          echo "git commit" >> $GITHUB_STEP_SUMMARY
          echo "git push origin uat" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
